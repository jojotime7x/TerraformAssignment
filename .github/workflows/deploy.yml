# Workflow Name: Clearly indicates the purpose and target environment.
name: Terraform CI/CD Pipeline for AWS Deployment

# Triggers: Defines when the workflow should be executed.
on:
  push: # Automated trigger on code push.
    branches:
      - main # Restricts trigger to changes in the 'main' branch.
  workflow_dispatch: # Manual trigger via GitHub UI, with optional parameters.
    inputs:
      destroy: # Optional input to decide if infrastructure should be destroyed.
        description: 'Set to true to destroy infrastructure as part of this run'
        required: false
        default: 'true'

# Jobs: Collection of tasks this workflow will execute.
jobs:
  build-and-deploy:
    name: Build and Deploy Infrastructure
    runs-on: ubuntu-latest # Specifies the runner environment.
    env: # Centralizes configuration of environment variables.
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2 # Checks out your repository under $GITHUB_WORKSPACE.

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2 # Installs specified Terraform version for consistency.
        with:
          terraform_version: 1.7.3

      - name: Format Terraform Code
        id: fmt
        run: terraform fmt -check # Ensures Terraform files are properly formatted.

      - name: Initialize Terraform
        id: init
        run: terraform init # Initializes Terraform in the project directory.
        working-directory: ./Terraform-Assignment

      - name: Validate Terraform Configuration
        id: validate
        run: terraform validate # Validates the Terraform configuration for correctness.
        working-directory: ./Terraform-Assignment

      - name: Plan Terraform Deployment
        id: plan
        run: terraform plan # Generates an execution plan to preview changes.
        working-directory: ./Terraform-Assignment
        continue-on-error: true # Continues even if plan indicates changes.

      - name: Apply Terraform Changes
        id: apply
        run: terraform apply --auto-approve # Applies changes to reach desired state.
        working-directory: ./Terraform-Assignment

      - name: Optionally Destroy Infrastructure
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.destroy == 'true' }}
        run: terraform destroy --auto-approve # Destroys Terraform-managed infrastructure if opted-in.
        working-directory: ./Terraform-Assignment

      - name: Determine Build Outcome
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "BUILD_OUTCOME=Deployment succeeded!" >> $GITHUB_ENV
          else
            echo "BUILD_OUTCOME=Deployment failed. Check logs for details." >> $GITHUB_ENV
          fi
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TERRAFORM_CLI_PATH: /home/runner/work/_temp/aa42b80d-fba1-40fe-b120-f9fcf8fd9fa2
      

      - name: Notify Slack on Build Outcome
        uses: ./.github/actions/send-notification # Custom action to send notifications.
        with:
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }} # Securely passes the Slack Webhook URL.
          message: ${{ env.BUILD_OUTCOME }} # Sends the dynamic outcome message to Slack.
