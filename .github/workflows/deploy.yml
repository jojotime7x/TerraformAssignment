# Workflow Name: Specifies the purpose and target environment of the CI/CD pipeline.
name: Terraform CI/CD Pipeline for AWS Deployment

# Triggers: Defines the conditions under which the workflow will run.
on:
  push:
    branches:
      - main # Executes the workflow on pushes to the 'main' branch.

# Jobs: Defines the series of tasks that the workflow will execute.
jobs:
  build-and-deploy:
    name: Build and Deploy Infrastructure
    runs-on: ubuntu-latest # Specifies the type of virtual host machine to run the job on.

    # Environment variables accessible to all steps in this job.
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      # Optionally, define an environment variable for controlling destruction.
      # This would need to be set in the GitHub repository's secrets.
      DESTROY_INFRA: ${{ secrets.DESTROY_INFRA }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2 # Checks out the repository code.

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.3 # Ensures consistent Terraform version usage.

      - name: Format Terraform Code
        run: terraform fmt -check
        # Ensures Terraform files are formatted correctly.

      - name: Initialize Terraform
        run: terraform init
        working-directory: ./Terraform-Assignment
        # Prepares Terraform configuration, initializing the backend and downloading plugins.

      - name: Validate Terraform Configuration
        run: terraform validate
        working-directory: ./Terraform-Assignment
        # Checks for correctness of the Terraform files.

      - name: Plan Terraform Deployment
        run: terraform plan
        working-directory: ./Terraform-Assignment
        continue-on-error: true
        # Creates an execution plan to show what Terraform will do.

      - name: Apply Terraform Changes
        run: terraform apply --auto-approve
        working-directory: ./Terraform-Assignment
        # Applies the Terraform plan to update infrastructure.

      - name: Echo DESTROY_INFRA Value
        run: echo "DESTROY_INFRA is set to '${{ env.DESTROY_INFRA }}'"
      
      - name: Optionally Destroy Infrastructure
        if: env.DESTROY_INFRA == 'false'
        run: terraform destroy --auto-approve
        working-directory: ./Terraform-Assignment
        # Conditionally destroys the Terraform-managed infrastructure based on the DESTROY_INFRA variable.

      - name: Determine Build Outcome
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "BUILD_OUTCOME=Deployment succeeded!" >> $GITHUB_ENV
          else
            echo "BUILD_OUTCOME=Deployment failed. Check logs for details." >> $GITHUB_ENV
          fi
        # Sets the build outcome based on the job status for use in the notification step.

      - name: Notify Slack on Build Outcome
        uses: ./.github/actions/send-notification
        with:
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          message: ${{ env.BUILD_OUTCOME }}
        # Sends a notification to Slack with the outcome of the build and deployment process.
